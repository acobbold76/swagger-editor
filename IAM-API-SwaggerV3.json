swagger: "2.0"
info:
  description: "This swagger has been designed for CMHC IAM APIs"
  version: "1.0.0"
  title: "CMHC IAM-APIs"  
host: 'localhost'
basePath: "/identity/api/v1.0"
tags:
- name: "IAM-APIs"
  description: "IAM-APIs"
schemes:
- "https"
paths:
  /getToken:
    post:
      tags:
      - "IAM-APIs"
      summary: "Return Authentication Token."
      description: "This token must be used to invoke all API calls."
      operationId: "getToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/getTokenRequest"  
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/getTokenResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API."
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"  
        "407":  
          description: "Authentication failed."
          schema:
            $ref: "#/definitions/authenticateUserFailed"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"    
        "404":  
          description: "Not Found."
          schema:
            $ref: "#/definitions/UserNotFound"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"  
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"    
        "403":  
          description: "Not authorized to perform operation."
          schema:
            $ref: "#/definitions/userNotAuthorized"    
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"  
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /addNewGroup:
    post:
      tags:
      - "IAM-APIs"
      summary: "Add a group in AD."
      description: ""    
      operationId: "addNewGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
        
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/addNewGroupRequest"
      responses:
        "201":
          description: "Created."
          schema:
            $ref: "#/definitions/addNewGroupResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed" 
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "409":
         description: "Group already exists"
         schema:
            $ref: "#/definitions/groupAlreadyExists"
        "424":
         description: "OU does not exist"
         schema:
            $ref: "#/definitions/ouDoesNotExist"
        "417":
          description: "Group creation failed"
          schema:
            $ref: "#/definitions/groupCreationFailed"
        "426":
          description: "Special character not allowed"
          schema:
            $ref: "#/definitions/groupSpecialCharacterNotAllowed"
        "411":
          description: "Length Required"
          schema:
            $ref: "#/definitions/minMaxLength"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /deleteExistingGroup:
    delete:
      tags:
      - "IAM-APIs"
      summary: "Delete a group from AD."
      description: ""    
      operationId: "deleteExistingGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/deleteExistingGroupRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/deleteExistingGroupResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "426":
          description: "Special character not allowed"
          schema:
            $ref: "#/definitions/groupSpecialCharacterNotAllowed"
        "411":
          description: "Length Required"
          schema:
            $ref: "#/definitions/minMaxLength"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /updateGroupDetails:
    post:
      tags:
      - "IAM-APIs"
      summary: "Update a group on AD."
      description: ""    
      operationId: "updateGroupDetails"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/updateGroupDetailsRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/updateGroupDetailsResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "409":
         description: "Group already exists"
         schema:
            $ref: "#/definitions/groupAlreadyExists"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "426":
          description: "Special character not allowed"
          schema:
            $ref: "#/definitions/groupSpecialCharacterNotAllowed"
        "411":
          description: "Length Required"
          schema:
            $ref: "#/definitions/minMaxLength"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /getListofGroups:
    get:
      tags:
      - "IAM-APIs"
      summary: "Get list of groups from AD."
      description: ""    
      operationId: "getListofGroups"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - name: "parentOUName"
        in: "query"
        description: "parentOUName"
        required: true
        type: "string" 
      - name: "ouName"
        in: "query"
        description: "ouName"
        required: false
        type: "string"  
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/getListofGroupResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "424":
          description: "OU does not exist"
          schema:
            $ref: "#/definitions/ouDoesNotExist"
        "400":
          description: "Bad Request"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /addUsersInGroup:
    post:
      tags:
      - "IAM-APIs"
      summary: "Add user/users to group in AD."
      description: ""    
      operationId: "addUserInGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/addUserInGroupRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/addUserInGroupResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/userNotFound_Multiple"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /moveUsersFromGroup:
    post:
      tags:
      - "IAM-APIs"
      summary: "Move an/multiple user(s) between groups in AD."
      description: ""    
      operationId: "moveUsersFromGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/moveUserFromGroupRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/moveUserFromGroupResponse"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "404":  
          description: "Not Found."
          schema:
            $ref: "#/definitions/UserNotFound" 
        "409":
         description: "User already exists in group"
         schema:
            $ref: "#/definitions/userAlreadyExistsInGroup"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing" 
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "416":
          description: "Does not exist in group"
          schema:
            $ref: "#/definitions/notexistInGroup"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /moveUsersFromOU:
    post:
      tags:
      - "IAM-APIs"
      summary: "Move an/multiple user(s) between OU in AD."
      description: ""    
      operationId: "moveUsersFromOU"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/moveUsersFromOURequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/moveUsersFromOUResponse"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "404":  
          description: "Not Found."
          schema:
            $ref: "#/definitions/UserNotFound" 
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "424":
         description: "OU does not exist"
         schema:
            $ref: "#/definitions/ouDoesNotExist"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /deleteUsersFromGroup:
    delete:
      tags:
      - "IAM-APIs"
      summary: "Delete user/users from a group from AD."
      description: ""    
      operationId: "deleteUserFromGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/addUserInGroupRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/deleteUserFromGroupResponse"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/userNotFound_Multiple"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /authorizeUser:
    post:
      tags:
      - "IAM-APIs"
      summary: "Authorize a user if he is a part of any specific group."
      description: ""
      operationId: "authorizeUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/authorizeUserRequest"
      responses:
        "200":
          description: "Successful."
          schema:
            $ref: "#/definitions/authorizeUserResponse"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct."
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "109":  
          description: "Authentication failed."
          schema:
            $ref: "#/definitions/authenticateUserFailed"
        "412":
          description: "Mandatory fields are missing. Please check the JSON request pay load."
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /addNewUser:
    post:
      tags:
      - "IAM-APIs"
      summary: "Creates a new user in AD."
      description: ""    
      operationId: "createNewUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/createNewUserRequest"
      responses:
        "201":
          description: "Created."
          schema:
            $ref: "#/definitions/createNewUserResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "424":
         description: "OU does not exist"
         schema:
            $ref: "#/definitions/ouDoesNotExist"  
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "409":
         description: "User already exists"
         schema:
            $ref: "#/definitions/userAlreadyExists"    
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "426":
          description: "Special character not allowed"
          schema:
            $ref: "#/definitions/specialCharacterNotAllowedUser"
        "411":
          description: "Length Required"
          schema:
            $ref: "#/definitions/emailLengthValidation"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /deleteExistingUsers:
    delete:
      tags:
      - "IAM-APIs"
      summary: "Delete user(s) in AD."
      description: ""    
      operationId: "deleteExistingUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/deleteExistingUserRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/deleteExistingUserResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "404":  
          description: "Not Found"
          schema:
            $ref: "#/definitions/UserNotFound"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /editUserDetails:
    post:
      tags:
      - "IAM-APIs"
      summary: "Update a user on AD."
      description: ""    
      operationId: "editUserDetails"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/editUserDetailsRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/editUserDetailsResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "426":
          description: "Special character not allowed"
          schema:
            $ref: "#/definitions/specialCharacterNotAllowed"
        "411":
          description: "Length Required"
          schema:
            $ref: "#/definitions/emailLengthValidation"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /getUserListFromGroup:
    get:
      tags:
      - "IAM-APIs"
      summary: "List Users from a OU."
      description: ""    
      operationId: "getUserListFromGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - name: "groupName"
        in: "query"
        description: "groupName"
        required: true
        type: "string" 
      - name: "pageNo"
        in: "query"
        description: "pageNo"
        required: true
        type: "string" 
      - name: "pageSize"
        in: "query"
        description: "pageSize"
        required: true
        type: "string"   
      
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/getUserListFromGroupResponse"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "400":
          description: "Bad Request"
        "414":
          description: "Group does not exist"
          schema:
            $ref: "#/definitions/groupDoesNotExist"
        "489":
          description: "pageNo/pageSize error"
          schema:
            $ref: "#/definitions/pageNoPageSizeError"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []      
      - apim-subscription-key : []
  /getUserDetails:
    get:
      tags:
      - "IAM-APIs"
      summary: "Get details of a user from AD."
      description: ""
      operationId: "getUserDetails"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - name: "logonName"
        in: "query"
        description: "logonName"
        required: true
        type: "string"  
      responses:
        "200":
          description: "Successful."
          schema:
            $ref: "#/definitions/getUserDetailsResponse"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized. Authorization/Recognition ID are not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissingGetReq"   
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"   
        "404":  
          description: "Not Found"
          schema:
            $ref: "#/definitions/UserNotFound"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /activateDeactivateUser:
    post:
      tags:
      - "IAM-APIs"
      summary: "Activate/Deactivate user in AD."
      description: ""    
      operationId: "activateDeactivateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      - in: "body"
        name: "body"
        description: "Request JSON Object."
        required: true
        schema:
          $ref: "#/definitions/activateDeactivateUserRequest"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/activateDeactivateUserResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"
        "430":  
          description: "Already in requested state"
          schema:
            $ref: "#/definitions/activateDeactivate"      
        "412":
         description: "Precondition Failed"
         schema:
            $ref: "#/definitions/mandatoryFieldMissing" 
        "404":  
          description: "Not Found"
          schema:
            $ref: "#/definitions/UserNotFound"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
  /checkHealth:
    get:
      tags:
      - "IAM-APIs"
      summary: "Get health of APIs."
      description: ""
      operationId: "checkHealth"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "recognition-identity-id"
        in: "header"
        required: true
        type: "string"
      - name: "apim-subscription-key"
        in: "header"
        required: true
        type: "string"  
      responses:
        "200":
          description: "Successful."
          schema:
            $ref: "#/definitions/checkHealthResponse"
        "401":
          description: "Unauthorized. Recognition ID is not correct. \n Or \n Access denied due to missing apim-subscription-key. Make sure to include apim-subscription-key when making requests to an API.
            \n Or \n Unauthorized. Authorization token expired"
        "405":  
          description: "Method not allowed"
          schema:
            $ref: "#/definitions/methodNotAllowed"
        "408":
          description: "Request timeout"
        "415":
          description: "Unsupported media type"
        "429":  
          description: "Too Many Requests "
          schema:
            $ref: "#/definitions/tooManyRequests"
        "449":
          description: "Retry with the server cannot honor the request because the user has not provided the required information"
        "406": 
          description: "Only JSON allowed"
        "503": 
          description: "Service Unavailable"
        "504": 
          description: "Gateway Timeout"
        "500":  
          description: "Internal Server Error"   
      security:
      - Authorization: []
      - recognition-identity-id : []
      - apim-subscription-key : []
securityDefinitions:
  Authorization:
    type: "apiKey"
    name: "api_key"
    in: "header"
  recognition-identity-id:
    type: "apiKey"
    name: "api_key"
    in: "header"
  apim-subscription-key:
    type: "apiKey"
    name: "api_key"
    in: "header"  
definitions:
  UserNotFound:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "404"
      message:
        type: "string"
        example: "{username} does not exist."
    xml:
      name: "UserNotFound"
  userNotAuthorized:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "403"
      message:
        type: "string"
        example: "User is not authorized to perform this operation."
    xml:
      name: "userNotAuthorized"      
  mandatoryFieldMissing:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "412"
      message:
        type: "string"
        example: "Mandatory field(s) missing. Please check the JSON request pay load"
    xml:
      name: "mandatoryFieldMissing"
  mandatoryFieldMissingGetReq:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "412"
      message:
        type: "string"
        example: "Mandatory field(s) missing."
    xml:
      name: "mandatoryFieldMissingGetReq"
  activateDeactivate:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "430"
      message:
        type: "string"
        example: "{logonName} is already activated/deactivated."
    xml:
      name: "activateDeactivate"    
  userNotFound_Multiple:
    type: object
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "404" 
      message:
        type: "array"
        items:
          type: "string"
        example: ["{userName} does not exist."]
  authenticateUserFailed:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "407"
      message:
        type: "string"
        example: "Authentication failed. Please check the password"
    xml:
      name: "authenticateUserFailed"
  getTokenRequest:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
        example: "TESTUSER"
      password:
        type: "string"
        example: "8P5cQ5S33II8T7Paq1ok"  
    xml:
      name: "getTokenRequest"
  getTokenResponse:
    type: "object"
    properties:
      jwt:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpYW0iLCJleHAiOjE1ODg3ODAyMDQsImlhdCI6MTU4ODc3MjE1Nn0.TZeF_xG18aqQBVWlAh384MZpITsS9c3TJ6n9nuodbIc"
    xml:
      name: "getTokenResponse"
  addNewGroupRequest:
    type: "object"
    required:
    - "parentOUName"
    - "subOUName"
    - "groupName"
    properties:
      parentOUName:
        type: "string"
        example: "NEXTGENxrep01"
      subOUName:
        type: "string"
        example: "NEXTGENoSMT01"
      groupName:
        type: "string"
        example: "TESTGROUP"  
    xml:
      name: "addNewGroupRequest" 
  addNewGroupResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "201"
      message:
        type: "string"
        example: "New group created successfully"
     
    xml:
      name: "addNewGroupResponse"
  createNewUserRequest:
    type: "object"
    properties:
      userDetails:
        type: "array"
        items:
          $ref: '#/definitions/UserAttributes'
    xml:
       name: "createNewUserRequest"
  createNewUserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "201"
      message:
        type: "string"
        example: "{logonName} has been created successfully"
    xml:
      name: "createNewUserResponse"           
  UserAttributes:
    type: object
    properties:
      eMail:
        type: string
        example: "test@abc.com"  
      logonName:
        type: string
        example: "firstname.lastname"
      firstName:
        type: string
        example: "FirstName"
      groupList:
        type: array
        items:
          type: string
        example: ["vault_users","vault_admins"]  
      lastName:
        type: string
        example: "LastName"
      orgUnitName:
        type: string
        example: "NEToSMT01"
      parentOUName:
        type: string
        example: "NETxep01"
  ouDoesNotExist:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "424"
      message:
        type: "string"
        example: "{OU} does not exist in the Active Directory."
     
    xml:
      name: "ouDoesNotExist"
  groupAlreadyExists:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "409"
      message:
        type: "string"
        example: "{groupName} group already exists in the active directory. Please choose different name"
     
    xml:
      name: "groupAlreadyExists"
  groupDoesNotExist:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "414"
      message:
        type: "string"
        example: "{groupName} group does not exist in active directory"
     
    xml:
      name: "groupDoesNotExist"
  pageNoPageSizeError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "489"
      message:
        type: "string"
        example: "page number and page size must be a valid positive integer"
    xml:
      name: "pageNoPageSizeError"
  userAlreadyExistsInGroup:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "409"
      message:
        type: "string"
        example: "{userName} User already exist in the group {newGroupName}"
     
    xml:
      name: "userAlreadyExistsInGroup"
  notexistInGroup:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "416"
      message:
        type: "string"
        example: "{userName} User does not exist in Group {groupName}"
     
    xml:
      name: "notexistInGroup"
  groupCreationFailed:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "417"
      message:
        type: "string"
        example: "Group creation failed"
     
    xml:
      name: "groupCreationFailed"    
  deleteExistingGroupRequest:
    type: "object"
    required:
    - "groupName"
    properties:
       groupName:
        type: "string"
        example: "TESTGROUP"  
    xml:
      name: "deleteExistingGroupRequest" 
  deleteExistingGroupResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "Group has been deleted successfully"
     
    xml:
      name: "deleteExistingGroupResponse"
  updateGroupDetailsRequest:
    type: "object"
    required:
    - "existingGroupName"
    - "newGroupName"
    properties:
      existingGroupName:
        type: "string"
        example: "TESTGROUP"
      newGroupName:
        type: "string"
        example: "TESTGROUPNEW"   
    xml:
      name: "updateGroupDetailsRequest" 
  updateGroupDetailsResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "Group details are updated successfully"
     
    xml:
      name: "updateGroupDetailsResponse" 
  getListofGroupResponse:
    type: "object"
    properties:
      totalNumberOfGroups:
        type: "string"
        example: ""
      groupList:
        type: "array"
        items:
          type: "string"
        example: ["vault_users","vault_admins"]
    xml:
      name: "getListofGroupResponse" 
  addUserInGroupRequest:
    type: "object"
    required:
    - "groupName"
    - "members"
    properties:
      groupName:
        type: "string"
        example: "test_group"
      members:
        type: "array"
        items:
          type: "string"
        example: ["USER1","USER2"]
  addUserInGroupResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "Users successfully added to group"
  moveUserFromGroupRequest:
    type: "object"
    required:
    - "userDetails"
    properties:
      userDetails:
        type: "array"
        items:
          $ref: '#/definitions/MoveUserFromGroupAttributes'  
  MoveUserFromGroupAttributes:
    type: object
    properties:
      members:
        type: "array"
        items:
          type: "string"
        example: ["USER1","USER2"]
      groupName:
        type: string
        example: "oldGroupName" 
      newGroupName:
        type: string
        example: "newGroupName"   
  moveUserFromGroupResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "User(s) moved successfully" 
  moveUsersFromOURequest:
    type: "object"
    required:
    - "userDetails"
    properties:
      userDetails:
        type: "array"
        items:
          $ref: '#/definitions/moveUsersFromOUAttributes'  
  moveUsersFromOUAttributes:
    type: object
    properties:
      members:
        type: "array"
        items:
          type: "string"
        example: ["USER1","USER2"]
      parentOUName:
        type: string
        example: "parentOUName" 
      orgUnitName:
        type: string
        example: "orgUnitName"   
  moveUsersFromOUResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "User(s) moved successfully"       
  deleteUserFromGroupResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "User(s) removed successfully from group {groupName}"  
  authorizeUserRequest:
    type: "object"
    required:
    - "logonName"
    - "groupName"
    properties:
      logonName:
        type: "string"
        example: "TESTUSER"
      groupName:
        type: "string"
        example: ""  
    xml:
      name: "authorizeUserRequest" 
  authorizeUserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "160"
      message:
        type: "string"
        example: "You are authorized to access the application with Support user access."
      userAccess:
        type: boolean
        example: false  
    xml:
      name: "authorizeUserResponse"
  deleteExistingUserRequest:
    type: "object"
    required:
      - "userDetails"
    properties:
      userDetails:
        type: array
        items:
          $ref: '#/definitions/deleteUserAttributes'
    xml:
      name: "deleteExistingUserRequest"
  deleteUserAttributes:
    type: object
    properties: 
      logonName:
        type: string
        example: "test_user"
         
  deleteExistingUserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "User(s) deleted successfully"
     
    xml:
      name: "deleteExistingUserResponse"
  activateDeactivateUserRequest:
    type: "object"
    required:
      - "userDetails"
    properties:
      userDetails:
        type: array
        items:
          $ref: '#/definitions/activateDeactivateUserAttributes'
    xml:
      name: "activateDeactivateUserRequest"
  activateDeactivateUserAttributes:
    type: object
    properties: 
      logonName:
        type: string
        example: "test_user"
      userStatus:
        type: string
        example: "true"   
  activateDeactivateUserResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "User status has been changed successfully"
     
    xml:
      name: "deleteExistingGroupResponse"     
  editUserDetailsRequest:
    type: "object"
    required:
    - "userDetails"
    properties:
      userDetails:
        type: "array"
        items:
          $ref: '#/definitions/EditUserAttributes'   
    xml:
      name: "editUserDetailsRequest" 
  EditUserAttributes:
    type: object
    properties:
      groups:
        type: array
        items:
          type: string
        example: ["vault_users","vault_admins"]
      eMail:
        type: string
        example: "abc@yzx.com"
      firstName:
        type: string
        example: "FIRSTNAME"
      lastName:
        type: string
        example: "LASTNAME"
      logonName:
        type: string
        example: "test_user"
  editUserDetailsResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "200"
      message:
        type: "string"
        example: "All details are updated successfully"
     
    xml:
      name: "updateGroupDetailsResponse" 
  getUserDetailsResponse:
    type: "object"
    properties:
      firstName:
        type: "string"
        example: ""
      lastName:
        type: "string"
        example: ""
      logonName:
        type: "string"
        example: "" 
      eMail:
        type: "string"
        example: "" 
      userAccountStatus:
        type: "string"
        example: ""
      parentOUName:
        type: "string"
        example: ""
      softwareName:
        type: "string"
        example: "" 
      ouName:
        type: "string"
        example: "" 
      distinguisedName:
        type: "string"
        example: "" 
      userPrincipleName:
        type: "string"
        example: ""
      memberOf:
        type: "array"
        items:
          type: "string"
        example: ["AdminGroup","UserGroup"]
      orgUnitName:
        type: "string"
        example: ""
      lastlogin:
        type: "string"
        example: ""  
    xml:
      name: "getUserDetailsResponse" 
  minMaxLength:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "411"
      message:
        type: "string"
        example: "Length of Name must be in between 2 to 20"
    xml:
      name: "minMaxLength"
  getUserListFromGroupResponse:
    type: "object"
    properties:
      responseCode:
        type: "integer"
        format: "int64"
        example: "200"
      totalNumberOfUsers:
        type: "string"
        example: "1"  
      userList:
        type: "array"
        items:
          $ref: '#/definitions/getUserListFromGroupAttributes'
  checkHealthResponse:
    type: "object"
    properties:
      responseCode:
        type: "integer"
        format: "int64"
        example: "500"
      responseMessage:
        type: "string"
        example: "Please find following service metrics of APIs Health."  
      apiServiceHealth:
         $ref: "#/definitions/apiServiceHealth"
      jreVersionPath:
        $ref: "#/definitions/jreVersionPath"
      ldapConnection:
        $ref: "#/definitions/ldapConnection"   
    xml:
      name: "checkHealthResponse"   
  specialCharacterNotAllowed:    
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "426"
      message:
        type: "string"
        example: "Name should not contain any number or special character"
    xml:
      name: "specialCharacterNotAllowed"
  specialCharacterNotAllowedUser:    
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "426"
      message:
        type: "string"
        example: "Name should not contain any number or special character or Email id is not valid. please check"
    xml:
      name: "specialCharacterNotAllowedUser"    
  groupSpecialCharacterNotAllowed:    
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "426"
      message:
        type: "string"
        example: "Group Name should not contain any special character except hyphen and underscore"
    xml:
      name: "groupSpecialCharacterNotAllowed" 
  emailLengthValidation:    
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "411"
      message:
        type: "string"
        example: "Invalid email length. Max length must be under 70.  / Length of Name must be in between 2 to 20"
    xml:
      name: "emailLengthValidation"     
  apiServiceHealth:
    type: "object"
    properties:
      healthCheckCode:
        type: "integer"
        format: "int64"
        example: "802"
      apiServicesHealth:
        type: "string"
        example: "UP"
    xml:
      name: "apiServiceHealth"
  jreVersionPath:
    type: "object"
    properties:
      healthCheckCode:
        type: "integer"
        format: "int64"
        example: "807"
      javaPath:
        type: "string"
        example: "C:\\Program Files\\Java\\jdk-11.0.6.10-hotspot"
      javaRunTimeEnvironmentName:
        type: "string"
        example: "OpenJDK Runtime Environment"
      javaRunTimeEnvironmentVersion:
        type: "string"
        example: "11.0.6+10"  
    xml:
      name: "jreVersionPath" 
  ldapConnection:
    type: "object"
    properties:
      healthCheckCode:
        type: "integer"
        format: "int64"
        example: "801"
      healthCheckMessage:
        type: "string"
        example: "Successfully connected to LDAP"
      domainName:
        type: "string"
        example: "NEXTGEN"  
    xml:
      name: "ldapConnection"
  userAlreadyExists:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "409"
      message:
        type: "string"
        example: "{userName} already exist in the system. Choose different User ID"
     
    xml:
      name: "userAlreadyExistsInGroup"
  methodNotAllowed:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "405"
      timestamp:
        type: "string"
        example: "2021-05-18T08:36:44.970+0000"
      error:
        type: "string"
        example: "Method Not Allowed"
      message:
        type: "string"
        example: "Request method {methodType} not supported"
      path:
        type: "string"
        example: "Api path"   
    xml:
      name: "methodNotAllowed" 
  tooManyRequests:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int64"
        example: "429"
      message:
        type: "string"
        example: "Rate limit is exceeded. Try again in {retry} seconds."
     
    xml:
      name: "tooManyRequests"    
  getUserListFromGroupAttributes:
    type: "object"
    properties:
      firstName:
        type: "string"
        example: ""
      lastName:
        type: "string"
        example: ""
      logonName:
        type: "string"
        example: "" 
      eMail:
        type: "string"
        example: "" 
      userAccountStatus:
        type: "string"
        example: ""
      parentOUName:
        type: "string"
        example: ""
      softwareName:
        type: "string"
        example: "" 
      ouName:
        type: "string"
        example: "" 
      distinguisedName:
        type: "string"
        example: "" 
      userPrincipleName:
        type: "string"
        example: ""
      memberOf:
        type: "array"
        items:
          type: "string"
        example: ["AdminGroup","UserGroup"]
      orgUnitName:
        type: "string"
        example: ""
    xml:
      name: "getUserListFromOUAttributes"     
     